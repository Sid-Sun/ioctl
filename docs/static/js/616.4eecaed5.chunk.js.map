{"version":3,"file":"static/js/616.4eecaed5.chunk.js","mappings":"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","sources":["../node_modules/@codemirror/legacy-modes/mode/simple-mode.js","../node_modules/@codemirror/legacy-modes/mode/dockerfile.js"],"sourcesContent":["export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n","import {simpleMode} from \"./simple-mode.js\"\n\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\nvar others = [\n  \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n  \"add\", \"copy\", \"volume\", \"user\",\n  \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\nexport const dockerFile = simpleMode({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\\d+/,\n      token: \"number\"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    },\n    {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    },\n    {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n});\n\n"],"names":["ensureState","states","name","hasOwnProperty","Error","Rule","data","next","push","this","regex","val","caret","flags","RegExp","ignoreCase","source","String","toRegex","token","apply","replace","result","i","length","asToken","tokenFunction","stream","state","pending","pend","shift","pos","text","curState","rule","matches","sol","match","stack","pop","indent","indentation","indentUnit","dedent","j","backUp","join","indentFunction","meta","textAfter","dontIndentStates","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec","slice","from","fromRegex","shells","shellsAsArrayRegex","expose","exposeRegex","instructionRegex","concat","dockerFile","states_","languageData","hasIndentation","list","orig","startState","copyState","s","simpleMode","start","single","double","array","arguments","commentTokens","line"],"sourceRoot":""}